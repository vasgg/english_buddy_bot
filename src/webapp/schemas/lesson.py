from datetime import datetime
from typing import Type

from pydantic import BaseModel, Field

from database.models.lesson import Lesson
from enums import LessonLevel


class LessonSchema(BaseModel):
    id: int | None = None
    index: int | None = Field(title=' ')
    title: str = Field(title='–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞')
    level: LessonLevel | None = None
    created_at: datetime | None = None

    class Config:
        from_attributes = True
        extra = 'allow'


class LessonsTableSchema(LessonSchema):
    total_slides: str | None = Field(' ', title='–û—Å–Ω–æ–≤–Ω—ã–µ —Å–ª–∞–π–¥—ã')
    extra_slides: str | None = Field(' ', title='–≠–∫—Å—Ç—Ä–∞ —Å–ª–∞–π–¥—ã')
    is_paid: str = Field(' ', title='–ü–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫')
    errors_threshold: str = Field(' ', title='–ü–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫')
    slides: str = Field('üìñ', title=' ')
    edit_button: str = Field('‚úèÔ∏è', title=' ')
    up_button: str = Field('üîº', title=' ')
    down_button: str = Field('üîΩ', title=' ')
    plus_button: str = Field('‚ûï', title=' ')
    minus_button: str = Field('‚ûñ', title=' ')

    class Config:
        from_attributes = True


def get_lesson_data_model(lesson: Lesson) -> Type[BaseModel]:
    class LessonDataModel(BaseModel):
        title: str = Field(
            lesson.title,
            description='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.',
            title='–Ω–∞–∑–≤–∞–Ω–∏–µ',
        )
        errors_threshold: int | None = Field(
            lesson.errors_threshold if lesson.errors_threshold else None,
            description='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç–∫—Å—Ç—Ä–∞ —Å–ª–∞–π–¥–æ–≤. –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.',
            title='–ø–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫',
        )

        is_paid: bool = Field(
            True if lesson.is_paid else False,
            description='–û—Ç–º–µ—Ç—å—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ—Ç —É—Ä–æ–∫ –ø–ª–∞—Ç–Ω—ã–π. –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.',
            title='–ø–ª–∞—Ç–Ω—ã–π',
        )

    return LessonDataModel


def get_new_lesson_data_model() -> Type[BaseModel]:
    class LessonDataModel(BaseModel):
        title: str = Field(
            'New lesson',
            description='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.',
            title='–Ω–∞–∑–≤–∞–Ω–∏–µ',
        )
        errors_threshold: int | None = Field(
            None,
            description='–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç–∫—Å—Ç—Ä–∞ —Å–ª–∞–π–¥–æ–≤. –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.',
            title='–ø–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫)',
        )
        is_paid: bool = Field(
            False,
            description='–û—Ç–º–µ—Ç—å—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ—Ç —É—Ä–æ–∫ –ø–ª–∞—Ç–Ω—ã–π. –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.',
            title='–ø–ª–∞—Ç–Ω—ã–π',
        )

    return LessonDataModel


class EditLessonDataModel(BaseModel):
    title: str
    total_slides: int | None = None
    errors_threshold: int | None = None
    is_paid: bool = False


class NewLessonDataModel(BaseModel):
    title: str
    errors_threshold: int | None = None
    is_paid: bool = False
